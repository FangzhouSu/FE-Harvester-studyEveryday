字节跳动日常实习国际社区 （一面） （50min）
1. 自我介绍 一分20秒
2. 看的书籍是什么？
3. 问项目
  1. 大家保险业务是什么？
  2. 如何验证一个用户是登录用户？
    1. Token cookie 是否过期 
  3. Token 如何产生的呢？
    1. 服务端如何产生Token？
      1. 服务端产生的密匙 ， 用来维持校验登陆状态
    2. cookie和session的区别
      1. COOKIE和SESSION有什么区别？ - 知乎 (zhihu.com)
      2. 由于http是无状态的协议 ， 服务端需要记录状态由此生成session ，类似于会话 ， 用于跟踪用户状态 （特点 ： 服务端保存 ， 用于记录用户状态）
      3. Cookie ， 识别特定的用户 ，客户端保存 ， 客户端在请求时会把相应的cookie信息发送至服务端。（利用cookie实现session的跟踪 ， 在cookie存一个sessionid ， 每次请求通过寻找这个id）
      4. 如果禁用cookie？ 使用一种URL重写的技术 进行会话跟踪（在url后附上参数）
      5. 总结： 
        1. session ： 保存在服务端 ， 用开记录用户的状态
        2. cookie：保存在客户端 ， 用来识别特定的用户 ， 常用cookie来实现session的跟踪
      6. cookie是如何产生的呢？
        1. cookie是服务生成发给客户端并保存在本地的一小块数据 ， 他会在浏览器发出请求时被携带并发送到服务器上
4. Vue  路由守卫如何实现的呢？ 是什么？
  1. vue框架
  2. 全局前置路由守卫 全局后置路由守卫 组件内的路由守卫 keep-alive 缓存组件内部的状态 避免重新渲染
5. Vue 组件如何通信？
  1. 父子组件通信Vue框架的知识 
6. Vue双向绑定实现原理？
  1. vue框架
7. JavaScript数据类型
8. js变量回收的循环引用
9. 说一下ES5中实现继承
10. 原型链 ， 原型链最终的指向？
11. 编程题输出
12. HTML语义化
13. 网络
  1. 强缓存和协商缓存
    1. 标识 如何知道缓存了 如何知道过期了
  2. Http 1 2 不同
  3. Http 3
  4. webScoket
14. 参数比较编程题 
  1. String string 值一样返回true  Object Object 返回true  function function 都是声明的一个新的变量 返回false
/**
 * 
 * 编程题
 * 写一个函数 判断类型
 * function({} , {}) true
 * function(1 , 1) true
 * function('s' , 's') true
 * function([] , []) true
 * function(function () , function ()) false
 */

const compare = (a , b) =>{
    // 先判断全等的情况
    if(a === b){return true};
    // 考虑函数类型
    if(typeof a === typeof b === 'function'){
        return false;
    }
    // 基本类型
    if(typeof a !== typeof b){
        return false
    }
    // 数组 类型时
    if(a instanceof Array && b instanceof Array){
        if(a.length !== b.length){
            return false
        }
        if(a.join('') === b.join('')){
            return true
        }else{
            return false
        }
    }
    // 对象类型
    if(a instanceof Object && b instanceof Object){
        const c1 = Object.keys(a);
        const c2 = Object.keys(b);
        if(c1.length !== c2.length){
            return false
        }
        // 长度一致时
        for(let i in a){
            if(a[i] !== b[i]){
                return false
            }
            if(compare(a[i] , b[i]) === false){
                return false
            }
        }
        return true
    }

}

// console.log(compare([1,2,2] , [1,2 , 22]))
console.log(compare({
    a:1,
    b:1,
    c:{
        d:1,
        c:{
            a:1
        }
    }
},{
    a:1,
    b:1,
    c:{
        d:1,
        c:{
            a:1
        }
    }
}))


